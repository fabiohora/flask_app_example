name: Deploy to ECR

on:
  push:
    branches: [main]

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write # (Optional if you later switch to OIDC)
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Compute tag
        id: meta
        run: echo "TAG=${GITHUB_SHA::7}" >> "$GITHUB_OUTPUT"

      - name: Login to Amazon ECR
        id: ecr-login
        uses: aws-actions/amazon-ecr-login@v2
        with:
          mask-password: true

      - name: Build and push image to ECR
        env:
          IMAGE_URI: ${{ steps.ecr-login.outputs.registry }}/feh-flask-example:${{ steps.meta.outputs.TAG }}
        run: |
          docker build -t "$IMAGE_URI" .
          docker push "$IMAGE_URI"
          echo "IMAGE_URI=$IMAGE_URI" >> "$GITHUB_OUTPUT"

      - name: Generate new task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: app-task-def.json
          container-name: app
          image: ${{ steps.ecr-login.outputs.REPO_URL }}/feh-flask-example:${{ steps.meta.outputs.TAG }}

      - name: Deploy to Amazon ECS service
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: feh-flask-svc
          cluster: feh-flask-cluster
          wait-for-service-stability: true
